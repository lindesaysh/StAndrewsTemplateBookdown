[["index.html", "MTXXXX: Some stats Welcome Prerequisites Learning outcomes Recommended reading Data files Assessment Lateness policy Work submitted late for good reason Acknowledgements", " MTXXXX: Some stats L. Scott-Hayward and JJ Valletta 28 January 2022 Welcome Welcome to MTXXXX: Some stats! An introductory-course in the field of statistical modelling in R. The focus will be on how to fit statistical models in R. The target audience is anyone who wants to learn how to fit linear models in R. The progression will be linear models, generalised linear models and linear mixed effects models. Prerequisites Programming basics in R MTXXXX Learning outcomes Understand the key concepts and terminology used in statistical modelling Use R to fit linear, generalised linear and mixed effect models in R Recognise practical issues with fitting these models Checking model fit Perform model comparisons Recommended reading I highly recommend the following books: Statistics: An Introduction using R Linear models with R Data files All data files can be found on Moodle. Assessment 80% written exam and 20% individual coursework Lateness policy The School has a lateness policy. The standard policy is an initial penalty of 15% of the maximum available mark, then a further 5% per 8-hour period, or part thereof for work submitted late without good reason. Work submitted late for good reason If students have a justified reason for submitting work late, then the various Universitys policies relating to extenuating circumstances apply. In these circumstances, students must as soon as possible submit a self-certificate of absence and contact the relevant member of School (usually the module coordinator). You will then be advised whether further documentation is required and what format this documentation will take. Acknowledgements We are indebted to all the statisticians who made some stats possible. "],["intro.html", "Chapter 1 Introduction 1.1 Figures and Tables 1.2 Equations 1.3 Examples", " Chapter 1 Introduction The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) bookdown is a tool for combining multiple R Markdown documents into a single book. Each .Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading # (e.g. # Introduction). To learn more about R Markdown read R Markdown: The Definitive Guide. To compile to PDF, you need to have LaTeX installed on your machine. xelatex and lualatex are recommended as they support Unicode better (see here and here for details). For a lightweight LaTeX installation one can use TinyTeX (which includes xelatex). You can label chapter and section titles using the {#label} syntax. For example # Introduction {#intro} assigns the label intro to the introductory chapter. We can then reference the chapter using the \\@ref(label) syntax. For example, Chapter \\@ref(intro) renders as Chapter 1. 1.1 Figures and Tables Figures and tables with captions are placed in figure and table environments, respectively. To include an image directly, its easiest to use knitr: ```{r, logo2, out.width=&quot;20%&quot;, echo=FALSE fig.alt=&#39;University of St Andrews Logo&#39;, fig.cap=&#39;A recognisable image.&#39;} knitr::include_graphics(&#39;standard-vertical-black.png&#39;) ``` produces Figure 1.1: A recognisable image. Reference a figure by its code chunk label with the fig: prefix. For example, Figure \\@ref(fig:nice-fig) renders as Figure 1.2. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19) Figure 1.2: Here is a nice figure! Similarly, tables generated by knitr::kable() can be referenced by their code chunk label with the tab: prefix. For example, Table \\@ref(tab:nice-tab) renders as Table 1.1. knitr::kable( head(iris, 10), caption = &#39;Here is a nice table!&#39;, booktabs = TRUE ) Table 1.1: Here is a nice table! Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 5.4 3.9 1.7 0.4 setosa 4.6 3.4 1.4 0.3 setosa 5.0 3.4 1.5 0.2 setosa 4.4 2.9 1.4 0.2 setosa 4.9 3.1 1.5 0.1 setosa You can also do a text reference for a figure caption which is useful if you want to include a mathematical expression and/or caption is very long. The syntax is (ref:label) Some text which can include equations. par(mar = c(4, 4, .1, .1)) plot(pressure, type = &#39;b&#39;, pch = 19, col=2) Figure 1.3: A text reference with a mathematical expression \\(y_i=\\beta_0 + \\beta_1x_i + \\epsilon_i\\) and \\(\\epsilon_i \\sim \\mathcal{N}(0, \\sigma^2)\\). You can write citations, too. For example, we are using the bookdown package (Xie 2021) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). 1.2 Equations \\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} (\\#eq:binom) \\end{equation} renders as: \\[\\begin{equation} f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k} \\tag{1.1} \\end{equation}\\] You may refer to it using \\@ref(eq:binom) which renders as (1.1). Please make sure equations without labels are not numbered by either using the equation* environment or adding \\nonumber or \\notag to your equations. The same rules apply to other math environments. For aligning multiple equations, align is the preferred environment. For example: \\begin{align} g(X_{n}) &amp; = g(\\theta)+g&#39;({\\tilde{\\theta}})(X_{n}-\\theta) \\notag \\\\ \\sqrt{n}[g(X_{n})-g(\\theta)] &amp; = g&#39;\\left({\\tilde{\\theta}}\\right) \\sqrt{n}[X_{n}-\\theta](\\#eq:align) \\\\ \\end{align} renders as \\[\\begin{align} g(X_{n}) &amp; = g(\\theta)+g&#39;({\\tilde{\\theta}})(X_{n}-\\theta) \\notag \\\\ \\sqrt{n}[g(X_{n})-g(\\theta)] &amp; = g&#39;\\left({\\tilde{\\theta}}\\right) \\sqrt{n}[X_{n}-\\theta]\\tag{1.2} \\\\ \\end{align}\\] Use split to have multiple lines with one equation reference. For example: \\begin{equation} \\begin{split} \\mathrm{Var}(\\hat{\\beta}) &amp; =\\mathrm{Var}((X&#39;X)^{-1}X&#39;y)\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)((X&#39;X)^{-1}X&#39;)&#39;\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)X(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\sigma^{2}IX(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}\\sigma^{2} \\end{split} (\\#eq:var-beta) \\end{equation} renders as \\[\\begin{equation} \\begin{split} \\mathrm{Var}(\\hat{\\beta}) &amp; =\\mathrm{Var}((X&#39;X)^{-1}X&#39;y)\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)((X&#39;X)^{-1}X&#39;)&#39;\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\mathrm{Var}(y)X(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}X&#39;\\sigma^{2}IX(X&#39;X)^{-1}\\\\ &amp; =(X&#39;X)^{-1}\\sigma^{2} \\end{split} \\tag{1.3} \\end{equation}\\] 1.3 Examples Using the example environment. For example: ``{example, eg1, name=&#39;Confidence intervals using the Normal approximation.&#39;} \\begin{alignat*}{2} -z_{\\alpha/2} \\leq{} &amp; \\;\\;\\;Z &amp; \\leq{} &amp; z_{\\alpha/2} \\\\ -z_{\\alpha/2} \\leq{} &amp; \\frac{\\hat{\\mu}-\\mu}{\\frac{\\sigma}{\\sqrt{n}}} &amp; \\leq{} &amp; z_{\\alpha/2}\\\\ \\hat{\\mu} - z_{\\alpha/2}\\frac{\\sigma}{\\sqrt{n}} \\leq{} &amp; \\;\\;\\;\\mu &amp; \\leq{} &amp; \\hat{\\mu} + z_{\\alpha/2}\\frac{\\sigma}{\\sqrt{n}} \\end{alignat*} `` renders as Example 1.1 (Confidence intervals using the Normal approximation.) \\[\\begin{alignat*}{2} -z_{\\alpha/2} \\leq{} &amp; \\;\\;\\;Z &amp; \\leq{} &amp; z_{\\alpha/2} \\\\ -z_{\\alpha/2} \\leq{} &amp; \\frac{\\hat{\\mu}-\\mu}{\\frac{\\sigma}{\\sqrt{n}}} &amp; \\leq{} &amp; z_{\\alpha/2}\\\\ \\hat{\\mu} - z_{\\alpha/2}\\frac{\\sigma}{\\sqrt{n}} \\leq{} &amp; \\;\\;\\;\\mu &amp; \\leq{} &amp; \\hat{\\mu} + z_{\\alpha/2}\\frac{\\sigma}{\\sqrt{n}} \\end{alignat*}\\] We can reference the example by its code chunk label with the exm: prefix. For example, Example \\@ref(exm:eg1) renders as Example 1.1. There are also theorem, lemma, etc. environments. Full details can be found here; heres one theorem as an example. (#thm:#pythag) (Pythagorean Theorem) In a right-angled triangle, the square of the hypotenuse is equal to the sum of the squares of the other two sides. You can also create blocks of text using the simple &gt; without the need for a chunk. For example, &gt; **Aside**: using the model to predict outside of the range of the observed data is called **extrapolating**. renders as Aside: using the model to predict outside of the range of the observed data is called extrapolating. References "],["bellsandwhistles.html", "Chapter 2 Bells and Whistles 2.1 Task and solution block 2.2 Different task and solution titles 2.3 Two-tabbed solution 2.4 Multi-tabbed options 2.5 Task with held solutions 2.6 Adding Boxes 2.7 Shiny apps and HTML widgets 2.8 TikZ", " Chapter 2 Bells and Whistles Chapter 1 briefly introduces the basic features of R Markdown and bookdown. For full details please refer to: R Markdown: The Definitive Guide bookdown: Authoring Books and Technical Documents with R Markdown In this Chapter we are going to introduce extra features/environments, some of which will only work when using the St Andrews template. Big thanks to TJ McKinley for sharing with us the code for the task and solution features. 2.1 Task and solution block The task block can be used to set exercises for the students. The solution block reveals the answer to the student (if enabled; more on that later). For the gitbook/HTML version there is a toggle button Show Solution that reveals the answer. In the PDF version, there is a hyperlink to take the reader to the solutions, which are in the appendix. There is also a link to get back to the place in the text from the appendix. The task block is used as follows. For example: ```{task} Here is a task written in **markdown**. ``` which renders as: Task Here is a task written in markdown. You can include chunks within the task chunk, but you need to use double backticks within the chunk, and leave carriage returns around the internal chunk. For example: ```{task} ``{r} x &lt;- 2 + 2 x `` ``` which renders as: Task x &lt;- 2 + 2 x ## [1] 4 Be careful to have suitable carriage returns around e.g. enumerate or itemize environments inside the chunk also. For example: ```{task} Here is a list: 1. item 1 2. item 2 ``` will not render nicely. But ```{task} Here is a list: 1. item 1 2. item 2 ``` will: Task Here is a list: item 1 item 2 The solution chunk works in the same way, and the numbers will follow the previous task chunk (so you can set tasks without solutions). For example: ```{task} Add 2 and 2 together ``` ```{solution} ``{r} 2 + 2 `` ``` gives: Task Add 2 and 2 together Show Solution Solution 2 + 2 ## [1] 4 2.2 Different task and solution titles task and solution boxes can be given different names using the title option (these can be set globally if preferred). For example: ```{task, title = &quot;Question&quot;} Produce a scatterplot of `mpg` against `hp`. What does the relationship look like? ``` ```{solution, title = &quot;Answer&quot;} ``{r} plot(hp ~ mpg, data = mtcars, pch=19, col=&#39;darkgrey&#39;) `` ``` renders as: Question Produce a scatterplot of mpg against hp. What does the relationship look like? Show Answer Answer plot(hp ~ mpg, data = mtcars, pch=19, col=&#39;darkgrey&#39;) 2.3 Two-tabbed solution You can have a task with two different solutions side-by-side, using the multCode = T option to the solution box. For example, you may want to show a solution using both base R and tidyverse. Here the two tabs are separated by four consecutive hashes: ####, and the titles option gives the tab titles (these can be set globally if preferred). For example: ```{task} Produce a scatterplot of `mpg` against `hp`. What does the relationship look like? ``` ```{solution, multCode=T, titles = c(&quot;Base R&quot;, &quot;tidyverse&quot;)} ``{r, fig.height=6, fig.width=6, out.width = &quot;60%&quot;} plot(hp ~ mpg, data = mtcars, pch=19, col=&#39;darkgrey&#39;) `` The plot suggests that a linear relationship might exist between the two variables. So we can proceed by fitting a linear model in R. #### ``{r, fig.height=6, fig.width=6, out.width = &quot;60%&quot;} ggplot(mtcars) + geom_point(aes(x = mpg, y = hp)) `` The plot suggests that a linear relationship might exist between the two variables. So we can proceed by fitting a linear model in R. ``` will render as: Task Produce a scatterplot of mpg against hp. What does the relationship look like? Show Solution Solution Base R tidyverse plot(hp ~ mpg, data = mtcars, pch=19, col=&#39;darkgrey&#39;) The plot suggests that a linear relationship might exist between the two variables. So we can proceed by fitting a linear model in R. ggplot(mtcars) + geom_point(aes(x = mpg, y = hp)) The plot suggests that a linear relationship might exist between the two variables. So we can proceed by fitting a linear model in R. 2.4 Multi-tabbed options You can also have just the multicode part (not embedded within the solution panel.). These appear side-by-side in the PDF document. Note that currently you can only have two tabs. For example: ```{multCode, titles=c(&#39;Part A&#39;, &#39;Part B&#39;)} Two options: * Option 1 - This is some text for part A #### Two options: * Option 2 - This is some text for part B ``` will typeset to: Part A Part B Two options: Option 1 - This is some text for part A Two options: Option 2 - This is some text for part B 2.5 Task with held solutions In the solution chunk header, if renderSol=FALSE then the solutions are not rendered as part of the book. For example: ```{task, title=&#39;Task (solution hidden)&#39;} Produce a scatterplot of `mpg` against `hp`. What does the relationship look like? ``` ```{solution, renderSol=FALSE} ``{r} plot(hp ~ mpg, data = mtcars, pch=19, col=&#39;darkgrey&#39;) `` This is my solution which you will only see if `renderSol` is set to `TRUE`. ``` will render as: Task (solution hidden) Produce a scatterplot of mpg against hp. What does the relationship look like? By default, in _setup.Rmd, renderSol is set to TRUE. If one of your chapters is a tutorial/practical, and you want to release the answers later on in the course, it can become tedious having to set renderSol to FALSE for every question. Instead, you can override this default at the beginning of each chapter, so you can turn on/off the solutions, as follows: ``{r, include=F} opts_chunk$set(renderSol=FALSE) `` Note that the chunk above changes everything after the chunk, so later chapters will retain this change unless you reset it. 2.6 Adding Boxes Sometimes you may wish to add a box section to your notes. There are currently three different coloured boxes defined; green and blue with white backgrounds and blue with pale blue background. For example, :::: {.greenbox data-latex=&quot;&quot;} This is an example of a green box. :::: :::: {.bluebox data-latex=&quot;&quot;} This is an example of a blue box. :::: :::: {.palebluebox data-latex=&quot;&quot;} This is an example of a blue box with pale blue background. :::: will render as: This is an example of a green box. This is an example of a blue box. This is an example of a blue box with pale blue background. You can also give your box a title. You can use ::: to denote a separate section inside the box: :::: {.palebluebox data-latex=&quot;&quot;} ::: {.center data-latex=&quot;&quot;} **This is my title** ::: This is the contents of my box. :::: renders as This is my title This is the contents of my box. You can add equations, figures, r-code etc to your boxes. For example: :::: {.greenbox data-latex=&quot;&quot;} ::: {.center data-latex=&quot;&quot;} **Things you can include** ::: Equations: $$y = \\beta_0 + \\beta_1X$$ R-code: ```r 1+1 ``` Figures: Formatting: + **bold** + *italic* a) sub bullets :::: will render as: Things you can include Equations: \\[y = \\beta_0 + \\beta_1X\\] R-code: 1+1 ## [1] 2 Figures: Formatting: bold italic sub bullets The colour scheme for the boxes is defined in the following files: style.css. For html output, see the section Create colour scheme for boxes preamble.tex. For pdf output, see the section LaTeX to create coloured boxes For more information on these boxes and other custom blocks have a look at this section of the R-Markdown Cookbook. 2.7 Shiny apps and HTML widgets You can add Shiny apps and HTML widgets to your book. For example, using the knitr::include_app(...) function we can embed a Shiny app that is hosted somewhere else. Note that this app renders as an interactive panel in the web book and a static screenshot in the PDF. For the PDF image to work properly, make sure you include dev='png' in the chunk header. You can then click on either the image or the link in the caption to live view the app. ``{r myshiny, echo=FALSE, screenshot.opts=list(delay=3), dev=&#39;png&#39;,fig.cap=&#39;An example of a shiny app. You can see a live version here&#39;} knitr::include_app(&quot;https://lindesaysh.shinyapps.io/faithfulshiny/&quot;, height=&#39;600px&#39;) `` renders as Figure 2.1: An example of a shiny app. You can see a live version here 2.8 TikZ Its possible to build TikZ from bookdown, but getting it to work is non-trivial: you need to install (at least) the following packages via the R console: install.packages(&quot;magick&quot;) install.packages(&quot;pdftools&quot;) both of which may require external dependencies to be installed; this seems to vary a lot between systems and if you need help with a particular system, please get in touch (fls3@). Commutative diagrams work: Figure 2.2: The First Isomorphism Theorem And so does tikzpicture with nodes, arrows, and so on. Since these TikZ diagrams are converted to images, you must ensure that alt-text is provided for them. You should also ensure that the text surrounding the image adequately explains what the image conveys. It doesnt seem to be possible to get pgfplots to work, so you may need to produce each plot manually and then include them as a figure like above. You may also wish to consider producing your plots in R using (e.g.) the library ggplot2. "],["final-words.html", "Chapter 3 Final Words 3.1 What are all these files for? 3.2 Publish book on Moodle", " Chapter 3 Final Words This template contains several files with different extensions and may look daunting at first. However, unless you want to customise specific aspects of this template, you only need to edit/add individual R Markdown files corresponding to each chapter of your course notes. Nevertheless, heres a brief description of each file in this template stratified by type. 3.1 What are all these files for? Markdown files index.Rmd: The only non-optional file. Starts with a YAML configuration file to set the title, author, date and other build options. --- title: &quot;MTXXXX: Some stats&quot; description: &quot;This is an example gitbook with some St Andrews styling.&quot; author: &quot;[L. Scott-Hayward](lass@st-andrews.ac.uk) and [JJ Valletta](jjv1@st-andrews.ac.uk)&quot; date: &#39;28 January 2022&#39; site: bookdown::bookdown_site documentclass: krantz classoption: oneside bibliography: [book.bib, packages.bib] biblio-style: apalike link-citations: yes colorlinks: yes --- Sets the global knitr options. These options can be overridden at the start of each chapter if one wants each chapter to have its own default options. ``{r setup, echo=FALSE} library(knitr) ## set knitr global options opts_chunk$set(cache=F, tidy.opts=list(width.cutoff=55), tidy=F, fig.align=&quot;center&quot;, fig.width=5, fig.height=5, multCode=F, renderTask=T, renderSol=T) `` Add _setup.Rmd to the book. ``{r, child = &quot;_setup.Rmd&quot;, include = F, purl = F, cache = F} `` Normal R Markdown. Typically contains the preface of your course notes, as shown in the template. Although it can be written as a separate .Rmd file for more modularity. # Welcome {-} Welcome to MTXXXX: Some stats! ... The last chunk of code in index.Rmd creates a BibTeX file to reference the packages used, see packages.bib for more details. This is optional. _setup.Rmd: This file specifies features/environments exclusive to this template; the task/solution block, multi-tabbed solutions, etc (see Chapter 2). Do not edit this file! 01-intro.Rmd - 03-summary.Rmd: These files contain all the content of your course notes. Each .Rmd file is a chapter and must begin with a single # level header (e.g. # Linear regression). You can have as many files as you want. .Rmd files are added to the book in alphabetical order. It is therefore recommended to number the files in the order youd like them to appear. Alternatively, use _bookdown.yml to specify the precise order (more on that later). 04-references.Rmd: Appends references at the end of the gitbook/HTML book. You can edit the name of the file, but dont edit whats in it. 05-ch_appendix.Rmd: Appends solutions at the end of the PDF file. You can edit the name of the file, but dont edit whats in it. README.md: Primarily intended as a landing page for the Github repo where this template is currently residing. This file can be safely deleted. Alternatively, if you dont use version control (like git), this file can be used to keep track of any major changes done to your course notes. YAML files YAML files are human-readable files typically used for configuration files. _bookdown.yml: Overarching configuration file for the book; set book file name, output directory, etc. It allows you to choose which chapters to include under which build (gitbook/html or pdf/latex). This is particularly useful when youre working on a large number of chapters. Through the rmd_files option you can choose to only compile the chapter youre currently working on, which reduces compilation time significantly. Note: The latex option must have the appendix.Rmd file as its last entry (name of file is irrelevant). This ensures that the appendix is properly formatted for the solutions to the problems. This is only needed for the PDF output; for gitbook/HTML, the task/solution block uses a toggle button instead. book_filename: &quot;StAndrewsTemplate&quot; language: ui: chapter_name: &quot;Chapter &quot; delete_merged_file: true rmd_files: html: [&quot;index.Rmd&quot;, &quot;01-intro.Rmd&quot;, &quot;02-bellsandwhistles.Rmd&quot;, &quot;03-summary.Rmd&quot;, &quot;04-references.Rmd&quot;] latex: [&quot;index.Rmd&quot;, &quot;01-intro.Rmd&quot;, &quot;02-bellsandwhistles.Rmd&quot;, &quot;03-summary.Rmd&quot;, &quot;04-references.Rmd&quot;, &quot;05-ch_appendix.Rmd&quot;] output_dir: &quot;docs&quot; _output.yml: Configuration file to set individual options of each output format. For example, which TeX typesetting engine to use, which style sheet to use for gitbook/HTML, whether to split the book by chapter or sections, etc. This information can be alternatively included in the YAML portion of index.Rmd (under the output: option). However, by having it as a separate file, it makes index.Rmd less cluttered. No need to edit this file unless you really want to. bookdown::gitbook: lib_dir: &quot;book_assets&quot; config: sharing: null edit: null download: [&quot;pdf&quot;] split_by: chapter highlight: pygments css: &#39;style.css&#39; includes: in_header: &#39;_toggle.html&#39; bookdown::pdf_book: keep_tex: TRUE citation_package: natbib latex_engine: xelatex includes: in_header: preamble.tex after_body: afterbody.tex LaTeX files preamble.tex: LaTeX preamble; load packages, define new commands, etc. It also defines the task/solution boxes for the PDF. afterbody.tex: This file specifies what to include at the end of the PDF. Currently it simply calls \\printindex to generate a linked index. You can add words to the index using the \\index{} command, e.g. \\index{least-squares}. krantz.cls: A LaTeX documentclass to prettify the PDF output. If you want to use your own class file, place it in the project directory and change the documentclass: krantz option at the start of index.Rmd (i.e. replace krantz by the name of your style file; make sure its in the project directory). Bibliography files book.bib: BibTeX file with your references. This file can be generated by most reference management software like Mendeley, Zotero, etc. packages.bib: This BibTeX file is created from the last chunk of code in index.Rmd file. It compiles the citations of the specified packages. ``{r include=FALSE} # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39;, &#39;ggplot2&#39; ), &#39;packages.bib&#39;) `` Web files style.css: CSS files describe the look of a webpage (colours, font sizes, etc.). Here, it describes the styling of the gitbook and includes the style of the task/solution blocks, the colour of the figure captions etc. The St Andrews colours used can be found here. Edit at your own risk! toggle.html. This is a javascript file for rendering the show/hide solution toggle button. Do not edit. Hidden files .gitignore/.gitattributes: Ignore/delete unless you use git for version control. 3.2 Publish book on Moodle Once you have finished compiling your course notes into a nice book, it is time to share it with your students on Moodle by following these steps: Compress the folder containing the compiled course notes as a .zip file.1 If you do not use version control, it is recommended that you rename this zip file by adding a timestamp (e.g. docs_20200721.zip), in case you want to archive older versions. Log into your course page on Moodle and turn editing on. Navigate to the section/topic where you want to upload the course notes and press + Add an activity or resource. Select File rather than Folder and upload the .zip file. Click on the zipped file and select unzip. Click on the unzipped folder, select index.html and Set main file. Save and return to course. The name of this folder is set in output_dir in _bookdown.yml, e.g. docs "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
